const pageFunc = (pageOptions: <%= listOptionsType %>): Promise<Page<<%= returns %>>> => {
pageOptions = pageOptions || {}
return apiWrapper(
resultsFn => {
this.client._CallApi(
{
url: "<%= path %>",
method: "GET",
<% if (queryParams.length > 0) { -%>
    query: {
    <% for (const queryParam of queryParams){ -%>
        <%- queryParam %>,
    <% } -%>
    },
<% } -%>
<% if (pathParams.length > 0) { -%>
    pathParams: {
    <% for (const pathParam of pathParams){ -%>
        <%- pathParam -%>,
    <% } -%>
    },
<% } -%>
<% if (fileParams.length > 0) { -%>
    formParams: {
    <% for (const fileParam of fileParams){ -%>
        <%- fileParam -%>,
    <% } -%>
    },
    contentTypes: [ "multipart/form-data" ],
<% } -%>
<% if (bodyParams.length > 0) { -%>
    body: {
    <% for (const bodyParam of bodyParams){ -%>
        <%- bodyParam -%>,
    <% } -%>
    },
<% } -%>
},
resultsFn
);
},
(data: Page<<%= returns %>>, done) => {
done(null, new Page(data, data.data, <%= returns %>Adapter.fromApi, pageOptions));
},
null
);
};
return new Paginator(pageFunc, options);